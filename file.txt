```zip
backend/
├── src/
│   ├── main.ts
│   ├── app.module.ts
│   ├── auth/
│   │   ├── auth.controller.ts
│   │   ├── dto/
│   │   │   ├── login.dto.ts
│   │   │   ├── refresh-token.dto.ts
│   ├── users/
│   │   ├── users.controller.ts
│   │   ├── dto/
│   │   │   ├── create-user.dto.ts
│   │   │   ├── update-user.dto.ts
│   ├── transactions/
│   │   ├── transactions.controller.ts
│   │   ├── dto/
│   │   │   ├── create-transaction.dto.ts
│   │   │   ├── update-transaction.dto.ts
│   ├── escrow/
│   │   ├── escrow.controller.ts
│   │   ├── dto/
│   │   │   ├── create-escrow.dto.ts
│   │   │   ├── update-escrow.dto.ts
│   ├── disputes/
│   │   ├── disputes.controller.ts
│   │   ├── dto/
│   │   │   ├── create-dispute.dto.ts
│   │   │   ├── update-dispute.dto.ts
├── .env.example
├── package.json (updated)
```

```typescript
// src/main.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { ValidationPipe } from '@nestjs/common';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Enable global validation pipe for DTO validation
  app.useGlobalPipes(new ValidationPipe({ transform: true }));

  // Enable CORS for frontend integration
  app.enableCors({
    origin: process.env.FRONTEND_URL || 'http://localhost:3000',
    credentials: true,
  });

  // Swagger configuration
  const config = new DocumentBuilder()
    .setTitle('Escrow Platform API')
    .setDescription(
      'API for a Nigerian e-commerce escrow platform facilitating secure transactions with escrow and dispute resolution features.',
    )
    .setVersion('1.0')
    .setContact('Support Team', 'https://escrow.ng', 'support@escrow.ng')
    .setTermsOfService('https://escrow.ng/terms')
    .setLicense('MIT', 'https://opensource.org/licenses/MIT')
    .addServer('https://api.escrow.ng', 'Production')
    .addServer('http://localhost:3000', 'Development')
    .addBearerAuth(
      { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
      'JWT-auth',
    )
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document, {
    swaggerOptions: {
      persistAuthorization: true, // Keep JWT token in Swagger UI
    },
  });

  // Get port from environment variables
  const configService = app.get(ConfigService);
  const port = configService.get<number>('PORT', 3000);

  // Start the server with HTTPS in production
  await app.listen(port);
  console.log(`Application is running on: http://localhost:${port}/api`);
}

bootstrap();
```

```typescript
// src/app.module.ts (updated for ConfigModule)
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { UsersModule } from './users/users.module';
import { TransactionsModule } from './transactions/transactions.module';
import { EscrowModule } from './escrow/escrow.module';
import { DisputesModule } from './disputes/disputes.module';
import { AuthModule } from './auth/auth.module';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true, // Make ConfigModule available globally
      envFilePath: '.env',
    }),
    MongooseModule.forRootAsync({
      imports: [ConfigModule],
      useFactory: async (configService: ConfigService) => ({
        uri: configService.get<string>('MONGODB_URI'),
      }),
      inject: [ConfigService],
    }),
    UsersModule,
    TransactionsModule,
    EscrowModule,
    DisputesModule,
    AuthModule,
  ],
})
export class AppModule {}
```

```typescript
// src/auth/auth.controller.ts (updated with Swagger annotations)
import { Controller, Post, Body, UseGuards } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';
import { RefreshTokenDto } from './dto/refresh-token.dto';
import { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';

@ApiTags('auth')
@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  @ApiOperation({ summary: 'User login with email and password' })
  @ApiBody({ type: LoginDto })
  @ApiResponse({ status: 201, description: 'Returns access and refresh tokens with user data' })
  @ApiResponse({ status: 401, description: 'Invalid credentials' })
  async login(@Body() loginDto: LoginDto) {
    return this.authService.login(loginDto);
  }

  @Post('refresh')
  @ApiOperation({ summary: 'Refresh access token using refresh token' })
  @ApiBody({ type: RefreshTokenDto })
  @ApiResponse({ status: 201, description: 'Returns new access and refresh tokens' })
  @ApiResponse({ status: 401, description: 'Invalid refresh token' })
  async refresh(@Body() refreshTokenDto: RefreshTokenDto) {
    return this.authService.refreshToken(refreshTokenDto.refresh_token);
  }
}
```

```typescript
// src/users/users.controller.ts (updated with Swagger annotations)
import { Controller, Post, Body, Get, Param, Patch, UseGuards } from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiBody } from '@nestjs/swagger';

@ApiTags('users')
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  @ApiOperation({ summary: 'Create a new user (buyer or seller)' })
  @ApiBody({ type: CreateUserDto })
  @ApiResponse({ status: 201, description: 'User created successfully' })
  @ApiResponse({ status: 409, description: 'User with email or phone already exists' })
  create(@Body() createUserDto: CreateUserDto) {
    return this.usersService.create(createUserDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Get(':id')
  @ApiOperation({ summary: 'Get user details by ID' })
  @ApiResponse({ status: 200, description: 'User details' })
  @ApiResponse({ status: 404, description: 'User not found' })
  findOne(@Param('id') id: string) {
    return this.usersService.findOne(id);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Patch(':id')
  @ApiOperation({ summary: 'Update user details' })
  @ApiBody({ type: UpdateUserDto })
  @ApiResponse({ status: 200, description: 'User updated successfully' })
  @ApiResponse({ status: 404, description: 'User not found' })
  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {
    return this.usersService.update(id, updateUserDto);
  }
}
```

```typescript
// src/transactions/transactions.controller.ts (updated with Swagger annotations)
import { Controller, Post, Body, Get, Param, Patch, UseGuards } from '@nestjs/common';
import { TransactionsService } from './transactions.service';
import { CreateTransactionDto } from './dto/create-transaction.dto';
import { UpdateTransactionDto } from './dto/update-transaction.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiBody } from '@nestjs/swagger';

@ApiTags('transactions')
@Controller('transactions')
export class TransactionsController {
  constructor(private readonly transactionsService: TransactionsService) {}

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Post()
  @ApiOperation({ summary: 'Create a new transaction' })
  @ApiBody({ type: CreateTransactionDto })
  @ApiResponse({ status: 201, description: 'Transaction created successfully' })
  create(@Body() createTransactionDto: CreateTransactionDto) {
    return this.transactionsService.create(createTransactionDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Get(':id')
  @ApiOperation({ summary: 'Get transaction details by ID' })
  @ApiResponse({ status: 200, description: 'Transaction details' })
  @ApiResponse({ status: 404, description: 'Transaction not found' })
  findOne(@Param('id') id: string) {
    return this.transactionsService.findOne(id);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Patch(':id')
  @ApiOperation({ summary: 'Update transaction status' })
  @ApiBody({ type: UpdateTransactionDto })
  @ApiResponse({ status: 200, description: 'Transaction updated successfully' })
  @ApiResponse({ status: 404, description: 'Transaction not found' })
  update(@Param('id') id: string, @Body() updateTransactionDto: UpdateTransactionDto) {
    return this.transactionsService.update(id, updateTransactionDto);
  }
}
```

```typescript
// src/escrow/escrow.controller.ts (updated with Swagger annotations)
import { Controller, Post, Body, Get, Param, Patch, UseGuards } from '@nestjs/common';
import { EscrowService } from './escrow.service';
import { CreateEscrowDto } from './dto/create-escrow.dto';
import { UpdateEscrowDto } from './dto/update-escrow.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiBody } from '@nestjs/swagger';

@ApiTags('escrow')
@Controller('escrow')
export class EscrowController {
  constructor(private readonly escrowService: EscrowService) {}

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Post()
  @ApiOperation({ summary: 'Create an escrow record for a transaction' })
  @ApiBody({ type: CreateEscrowDto })
  @ApiResponse({ status: 201, description: 'Escrow created successfully' })
  create(@Body() createEscrowDto: CreateEscrowDto) {
    return this.escrowService.create(createEscrowDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Get(':id')
  @ApiOperation({ summary: 'Get escrow details by ID' })
  @ApiResponse({ status: 200, description: 'Escrow details' })
  @ApiResponse({ status: 404, description: 'Escrow not found' })
  findOne(@Param('id') id: string) {
    return this.escrowService.findOne(id);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Patch(':id')
  @ApiOperation({ summary: 'Update escrow details' })
  @ApiBody({ type: UpdateEscrowDto })
  @ApiResponse({ status: 200, description: 'Escrow updated successfully' })
  @ApiResponse({ status: 404, description: 'Escrow not found' })
  update(@Param('id') id: string, @Body() updateEscrowDto: UpdateEscrowDto) {
    return this.escrowService.update(id, updateEscrowDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Patch(':id/release')
  @ApiOperation({ summary: 'Release escrow funds to seller' })
  @ApiResponse({ status: 200, description: 'Funds released successfully' })
  @ApiResponse({ status: 404, description: 'Escrow not found' })
  releaseFunds(@Param('id') id: string) {
    return this.escrowService.releaseFunds(id);
  }
}
```

```typescript
// src/disputes/disputes.controller.ts (updated with Swagger annotations)
import { Controller, Post, Body, Get, Param, Patch, UseGuards } from '@nestjs/common';
import { DisputesService } from './disputes.service';
import { CreateDisputeDto } from './dto/create-dispute.dto';
import { UpdateDisputeDto } from './dto/update-dispute.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiBody } from '@nestjs/swagger';

@ApiTags('disputes')
@Controller('disputes')
export class DisputesController {
  constructor(private readonly disputesService: DisputesService) {}

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Post()
  @ApiOperation({ summary: 'Raise a dispute for a transaction' })
  @ApiBody({ type: CreateDisputeDto })
  @ApiResponse({ status: 201, description: 'Dispute created successfully' })
  create(@Body() createDisputeDto: CreateDisputeDto) {
    return this.disputesService.create(createDisputeDto);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Get(':id')
  @ApiOperation({ summary: 'Get dispute details by ID' })
  @ApiResponse({ status: 200, description: 'Dispute details' })
  @ApiResponse({ status: 404, description: 'Dispute not found' })
  findOne(@Param('id') id: string) {
    return this.disputesService.findOne(id);
  }

  @UseGuards(JwtAuthGuard)
  @ApiBearerAuth('JWT-auth')
  @Patch(':id')
  @ApiOperation({ summary: 'Update dispute details (e.g., resolution)' })
  @ApiBody({ type: UpdateDisputeDto })
  @ApiResponse({ status: 200, description: 'Dispute updated successfully' })
  @ApiResponse({ status: 404, description: 'Dispute not found' })
  update(@Param('id') id: string, @Body() updateDisputeDto: UpdateDisputeDto) {
    return this.disputesService.update(id, updateDisputeDto);
  }
}
```

```typescript
// src/auth/dto/login.dto.ts (updated with Swagger)
import { IsEmail, IsString } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

export class LoginDto {
  @ApiProperty({ description: 'User email address', example: 'user@example.com' })
  @IsEmail()
  email: string;

  @ApiProperty({ description: 'User password', example: 'password123' })
  @IsString()
  password: string;
}
```

```typescript
// src/auth/dto/refresh-token.dto.ts (updated with Swagger)
import { IsString } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

export class RefreshTokenDto {
  @ApiProperty({ description: 'Refresh token for generating new access token', example: 'eyJhb...' })
  @IsString()
  refresh_token: string;
}
```

```typescript
// src/users/dto/create-user.dto.ts (updated with Swagger)
import { IsEmail, IsPhoneNumber, IsString, IsEnum, IsOptional } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

enum UserRole {
  BUYER = 'buyer',
  SELLER = 'seller',
  ADMIN = 'admin',
}

export class CreateUserDto {
  @ApiProperty({ description: 'User email address', example: 'user@example.com' })
  @IsEmail()
  email: string;

  @ApiProperty({ description: 'User phone number (Nigerian format)', example: '+2341234567890' })
  @IsPhoneNumber('NG')
  phone: string;

  @ApiProperty({ description: 'User password', example: 'password123' })
  @IsString()
  password: string;

  @ApiProperty({ description: 'User role', enum: UserRole, example: 'buyer' })
  @IsEnum(UserRole)
  role: UserRole;

  @ApiProperty({ description: 'Business verification (e.g., CAC number) for sellers', example: 'CAC123456', required: false })
  @IsOptional()
  @IsString()
  business_verification?: string;
}
```

```typescript
// src/users/dto/update-user.dto.ts
import { PartialType } from '@nestjs/mapped-types';
import { CreateUserDto } from './create-user.dto';

export class UpdateUserDto extends PartialType(CreateUserDto) {}
```

```typescript
// src/transactions/dto/create-transaction.dto.ts (updated with Swagger)
import { IsString, IsNumber, IsMongoId } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

export class CreateTransactionDto {
  @ApiProperty({ description: 'ID of the buyer', example: '507f1f77bcf86cd799439011' })
  @IsMongoId()
  buyer_id: string;

  @ApiProperty({ description: 'ID of the seller', example: '507f1f77bcf86cd799439012' })
  @IsMongoId()
  seller_id: string;

  @ApiProperty({ description: 'Transaction amount in NGN', example: 5000 })
  @IsNumber()
  amount: number;

  @ApiProperty({ description: 'Transaction status', example: 'pending' })
  @IsString()
  status: string;
}
```

```typescript
// src/transactions/dto/update-transaction.dto.ts
import { PartialType } from '@nestjs/mapped-types';
import { CreateTransactionDto } from './create-transaction.dto';

export class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}
```

```typescript
// src/escrow/dto/create-escrow.dto.ts (updated with Swagger)
import { IsMongoId, IsDate, IsString } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

export class CreateEscrowDto {
  @ApiProperty({ description: 'ID of the associated transaction', example: '507f1f77bcf86cd799439011' })
  @IsMongoId()
  transaction_id: string;

  @ApiProperty({ description: 'Date when funds are held in escrow', example: '2025-08-14T21:06:00.000Z' })
  @IsDate()
  hold_date: Date;

  @ApiProperty({ description: 'Escrow status', example: 'held' })
  @IsString()
  status: string = 'held';
}
```

```typescript
// src/escrow/dto/update-escrow.dto.ts
import { PartialType } from '@nestjs/mapped-types';
import { CreateEscrowDto } from './create-escrow.dto';

export class UpdateEscrowDto extends PartialType(CreateEscrowDto) {}
```

```typescript
// src/disputes/dto/create-dispute.dto.ts (updated with Swagger)
import { IsMongoId, IsString } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

export class CreateDisputeDto {
  @ApiProperty({ description: 'ID of the associated transaction', example: '507f1f77bcf86cd799439011' })
  @IsMongoId()
  transaction_id: string;

  @ApiProperty({ description: 'ID of the user raising the dispute', example: '507f1f77bcf86cd799439012' })
  @IsMongoId()
  raised_by: string;

  @ApiProperty({ description: 'Description of the dispute', example: 'Item not as described' })
  @IsString()
  description: string;

  @ApiProperty({ description: 'Dispute status', example: 'pending' })
  @IsString()
  status: string = 'pending';
}
```

```typescript
// src/disputes/dto/update-dispute.dto.ts
import { PartialType } from '@nestjs/mapped-types';
import { CreateDisputeDto } from './create-dispute.dto';

export class UpdateDisputeDto extends PartialType(CreateDisputeDto) {}
```

```plaintext
// .env.example
MONGODB_URI=mongodb://localhost/escrow-platform
PORT=3000
JWT_SECRET=your-secure-secret-key
FRONTEND_URL=http://localhost:3000
```

```json
// package.json (updated)
{
  "name": "escrow-platform-backend",
  "version": "1.0.0",
  "description": "Backend for Nigerian escrow platform",
  "main": "dist/main.js",
  "scripts": {
    "start": "nest start",
    "start:dev": "nest start --watch",
    "build": "nest build",
    "test": "jest"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/mongoose": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/swagger": "^7.0.0",
    "@nestjs/jwt": "^10.0.0",
    "@nestjs/passport": "^10.0.0",
    "@nestjs/config": "^3.0.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.0",
    "mongoose": "^8.0.0",
    "bcrypt": "^5.1.0",
    "class-validator": "^0.14.0",
    "jsonwebtoken": "^9.0.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/jest": "^29.0.0",
    "jest": "^29.0.0",
    "ts-jest": "^29.0.0",
    "typescript": "^5.0.0"
  }
}
```

### Explanation of Changes

#### MongoDB Connection
1. **Environment Variables**:
   - Added `@nestjs/config` to manage environment variables via a `.env` file.
   - Updated `app.module.ts` to use `MongooseModule.forRootAsync` to load the MongoDB URI from the environment variable `MONGODB_URI`.
   - Created a `.env.example` file to document required environment variables.

2. **Production-Ready Connection**:
   - The MongoDB URI can be set to a local instance (`mongodb://localhost/escrow-platform`) for development or a cloud-hosted MongoDB (e.g., MongoDB Atlas) for production.
   - Example production URI: `mongodb+srv://user:password@cluster0.mongodb.net/escrow-platform?retryWrites=true&w=majority`.

3. **Port Configuration**:
   - The server port is configurable via the `PORT` environment variable, defaulting to `3000` if not specified.

#### Swagger Documentation
1. **Enhanced Swagger Setup**:
   - Added detailed metadata in `main.ts` (title, description, contact, terms, license, servers).
   - Included `addBearerAuth` with the name `JWT-auth` to match the `JwtAuthGuard` usage.
   - Added `swaggerOptions` to persist JWT tokens in the Swagger UI for testing authenticated endpoints.

2. **Controller Annotations**:
   - Added `@ApiTags` to group endpoints by module (auth, users, transactions, escrow, disputes).
   - Used `@ApiOperation`, `@ApiResponse`, and `@ApiBody` to document each endpoint's purpose, expected responses, and request body schemas.
   - Applied `@ApiBearerAuth('JWT-auth')` to endpoints protected by `JwtAuthGuard`.

3. **DTO Annotations**:
   - Updated DTOs with `@ApiProperty` to include descriptions and example values, improving Swagger UI clarity.
   - Ensured validation rules (e.g., `IsEmail`, `IsMongoId`) are reflected in the Swagger schema.

4. **Security and Usability**:
   - Added CORS support in `main.ts` to allow frontend requests (configurable via `FRONTEND_URL`).
   - Enabled global validation pipe to enforce DTO validation, ensuring compliance with input requirements.

#### Compliance with Requirements
- **Security**: The Swagger setup includes Bearer token authentication, and the MongoDB connection uses environment variables to avoid hardcoding sensitive data (aligns with AES-256 encryption and HTTPS requirements).
- **Usability**: The Swagger UI is accessible at `/api` and provides a clear, interactive interface for testing endpoints.
- **Maintainability**: The code is modular, with environment variables and Swagger annotations making it easy to update and document.

### Setup Instructions
1. **Install Dependencies**:
   ```bash
   npm install
   ```

2. **Create `.env` File**:
   - Copy `.env.example` to `.env` and update with your MongoDB URI and other variables:
     ```plaintext
     MONGODB_URI=mongodb://localhost/escrow-platform
     PORT=3000
     JWT_SECRET=your-secure-secret-key
     FRONTEND_URL=http://localhost:3000
     ```

3. **Run the Application**:
   ```bash
   npm run start:dev
   ```

4. **Access Swagger UI**:
   - Open `http://localhost:3000/api` in a browser to view the Swagger documentation.
   - Use the "Authorize" button to input a JWT token obtained from `/auth/login`.
   - Test endpoints like `/users`, `/transactions`, `/escrow`, and `/disputes` with appropriate request bodies.

### Testing the Implementation
1. **MongoDB Connection**:
   - Verify the application connects to MongoDB by creating a user (`POST /users`) and checking the database.
   - If using MongoDB Atlas, ensure the URI includes the correct credentials and network access is configured.

2. **Swagger Documentation**:
   - Navigate to `http://localhost:3000/api` and confirm that all endpoints are listed under their respective tags (auth, users, transactions, escrow, disputes).
   - Test the `/auth/login` endpoint to obtain a JWT token, then use it to authenticate requests to protected endpoints like `/users/:id`.

### Next Steps
- **HTTPS in Production**: Configure HTTPS with TLS 1.3 by setting up an SSL certificate (e.g., via Let's Encrypt) when deploying to production (e.g., on Vercel or Render).
- **Payment Gateway Integration**: Add Paystack or Flutterwave integration to the `TransactionsService` for payment processing.
- **Notification Service**: Implement Twilio for SMS/email notifications in transaction and dispute workflows.
- **MFA for Sellers**: Add multi-factor authentication logic in the `AuthService` for seller accounts.

If you encounter issues (e.g., MongoDB connection errors, Swagger UI not displaying correctly) or need further enhancements (e.g., OAuth for social logins, KYC verification), let me know, and I can provide additional guidance!